// script.js for .htaccess Generator

document.addEventListener('DOMContentLoaded', () => {
    console.log(".htaccess Generator script loaded.");

    // --- Get references to all input elements ---
    const oldUrlRedirectInput = document.getElementById('oldUrlRedirect');
    const newUrlRedirectInput = document.getElementById('newUrlRedirect');
    const redirectTypeSelect = document.getElementById('redirectType');
    const forceHttpsCheckbox = document.getElementById('forceHttps');
    const ipToBlockInput = document.getElementById('ipToBlock');
    const error404Input = document.getElementById('error404');
    const error403Input = document.getElementById('error403');
    const preventDirectoryListingCheckbox = document.getElementById('preventDirectoryListing');

    // --- Get references to output and button elements ---
    const generatedHtaccessOutput = document.getElementById('generatedHtaccess');
    const generateBtn = document.getElementById('generateBtn');
    const copyBtn = document.getElementById('copyBtn');
    const clearBtn = document.getElementById('clearBtn');
    const messageBox = document.getElementById('messageBox');

    // --- Helper function to show messages to the user ---
    function showMessage(message, isError = false) {
        if (!messageBox) {
            console.error("Error: Message box element (#messageBox) not found in HTML.");
            return;
        }

        messageBox.textContent = message;
        messageBox.classList.remove('error');
        messageBox.classList.add('show');

        if (isError) {
            messageBox.classList.add('error');
            messageBox.style.color = 'var(--cyber-neon-pink)';
            messageBox.style.textShadow = '0 0 12px var(--cyber-neon-pink)';
            console.error("Message (Error):", message);
        } else {
            messageBox.style.color = 'var(--cyber-neon-cyan)';
            messageBox.style.textShadow = '0 0 12px var(--cyber-neon-cyan)';
            console.log("Message (Success/Info):", message);
        }

        setTimeout(() => {
            messageBox.classList.remove('show');
            messageBox.textContent = '';
        }, 3000);
    }

    // --- Main function to generate .htaccess content ---
    function generateHtaccess() {
        console.log("generateHtaccess() called.");

        let htaccessContent = [];
        htaccessContent.push("# .htaccess generated by Hangga's Tool Hub");
        htaccessContent.push("# For Apache web servers");
        htaccessContent.push(""); // Empty line for spacing

        // Redirects
        const oldUrl = oldUrlRedirectInput ? oldUrlRedirectInput.value.trim() : '';
        const newUrl = newUrlRedirectInput ? newUrlRedirectInput.value.trim() : '';
        const redirectType = redirectTypeSelect ? redirectTypeSelect.value : '';

        if (oldUrl && newUrl && redirectType) {
            htaccessContent.push("# --- Redirect ---");
            if (redirectType === '301') {
                htaccessContent.push(`Redirect 301 ${oldUrl} ${newUrl}`);
            } else if (redirectType === '302') {
                htaccessContent.push(`Redirect 302 ${oldUrl} ${newUrl}`);
            }
            htaccessContent.push("");
        } else if ((oldUrl || newUrl || redirectType) && !(oldUrl && newUrl && redirectType)) {
            // Warn if only some fields are filled for redirect
            showMessage("Please fill all Redirect fields (Old URL, New URL, and Type) or leave them all empty.", true);
        }

        // Force HTTPS
        const forceHttps = forceHttpsCheckbox ? forceHttpsCheckbox.checked : false;
        if (forceHttps) {
            htaccessContent.push("# --- Force HTTPS ---");
            htaccessContent.push("RewriteEngine On");
            htaccessContent.push("RewriteCond %{HTTPS} off");
            htaccessContent.push("RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]");
            htaccessContent.push("");
        }

        // IP Blocking
        const ipToBlock = ipToBlockInput ? ipToBlockInput.value.trim() : '';
        if (ipToBlock) {
            htaccessContent.push("# --- IP Blocking ---");
            htaccessContent.push("Order Allow,Deny");
            ipToBlock.split('\n').forEach(ip => {
                const trimmedIp = ip.trim();
                if (trimmedIp) {
                    htaccessContent.push(`Deny from ${trimmedIp}`);
                }
            });
            htaccessContent.push("Allow from all");
            htaccessContent.push("");
        }

        // Custom Error Pages
        const error404 = error404Input ? error404Input.value.trim() : '';
        const error403 = error403Input ? error403Input.value.trim() : '';

        if (error404 || error403) {
            htaccessContent.push("# --- Custom Error Pages ---");
            if (error404) {
                htaccessContent.push(`ErrorDocument 404 ${error404}`);
            }
            if (error403) {
                htaccessContent.push(`ErrorDocument 403 ${error403}`);
            }
            htaccessContent.push("");
        }

        // Prevent Directory Listing
        const preventDirectoryListing = preventDirectoryListingCheckbox ? preventDirectoryListingCheckbox.checked : false;
        if (preventDirectoryListing) {
            htaccessContent.push("# --- Prevent Directory Listing ---");
            htaccessContent.push("Options -Indexes");
            htaccessContent.push("");
        }

        // Remove trailing empty lines if any
        while (htaccessContent.length > 0 && htaccessContent[htaccessContent.length - 1] === "") {
            htaccessContent.pop();
        }

        // Update the output textarea
        if (generatedHtaccessOutput) {
            generatedHtaccessOutput.value = htaccessContent.join('\n');
            console.log("Generated .htaccess content updated in output textarea.");
        } else {
            console.error("Error: Output textarea (#generatedHtaccess) not found.");
        }
    }

    // --- Function to copy text to clipboard ---
    function copyToClipboard(element) {
        if (!element || !element.value) {
            showMessage('Nothing to copy!', true);
            return;
        }
        element.select();
        try {
            document.execCommand('copy');
            showMessage('.htaccess content copied to clipboard!', false);
        } catch (err) {
            console.error('Failed to copy text: ', err);
            showMessage('Failed to copy! Please try manually.', true);
        }
    }

    // --- Function to clear all input fields and the output ---
    function clearAll() {
        console.log("clearAll() called.");

        if (oldUrlRedirectInput) oldUrlRedirectInput.value = '';
        if (newUrlRedirectInput) newUrlRedirectInput.value = '';
        if (redirectTypeSelect) redirectTypeSelect.value = ''; // Reset to "None"
        if (forceHttpsCheckbox) forceHttpsCheckbox.checked = false;
        if (ipToBlockInput) ipToBlockInput.value = '';
        if (error404Input) error404Input.value = '';
        if (error403Input) error403Input.value = '';
        if (preventDirectoryListingCheckbox) preventDirectoryListingCheckbox.checked = false;

        if (generatedHtaccessOutput) generatedHtaccessOutput.value = '';
        showMessage('All fields cleared!', false);

        // Regenerate .htaccess with default/empty values after clearing
        generateHtaccess();
    }

    // --- Attach Event Listeners ---
    // Generate button
    if (generateBtn) {
        generateBtn.addEventListener('click', generateHtaccess);
        console.log("Generate button event listener attached.");
    } else {
        console.error("Error: Generate button (#generateBtn) not found.");
    }

    // Copy button
    if (copyBtn) {
        copyBtn.addEventListener('click', () => copyToClipboard(generatedHtaccessOutput));
        console.log("Copy button event listener attached.");
    } else {
        console.error("Error: Copy button (#copyBtn) not found.");
    }

    // Clear button
    if (clearBtn) {
        clearBtn.addEventListener('click', clearAll);
        console.log("Clear button event listener attached.");
    } else {
        console.error("Error: Clear button (#clearBtn) not found.");
    }

    // Live updates on input change for all relevant fields
    document.querySelectorAll(
        '#oldUrlRedirect, #newUrlRedirect, #redirectType, #forceHttps, ' +
        '#ipToBlock, #error404, #error403, #preventDirectoryListing'
    ).forEach(input => {
        if (input) {
            const eventType = (input.tagName === 'SELECT' || input.type === 'checkbox') ? 'change' : 'input';
            input.addEventListener(eventType, generateHtaccess);
            console.log(`Event listener attached to ${input.id} for '${eventType}' event.`);
        } else {
            console.warn(`Warning: Input element with ID '${input.id}' not found for live update listener.`);
        }
    });

    // --- Initial setup on page load ---
    // Populate with default values and generate initial .htaccess
    generateHtaccess();
    console.log("Initial .htaccess generation completed on DOMContentLoaded.");
});
